{
  "name": "Jsoncache",
  "tagline": "A simple JSON cache for caching data intended for use with JSON APIs.",
  "body": "# JSONCache [![Build Status](https://travis-ci.org/DerekStride/jsoncache.svg?branch=dynamic-caching-based-on-arguments)](https://travis-ci.org/DerekStride/jsoncache)\r\n\r\nA simple JSON Cache for use with HTTP APIs.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'jsoncache'\r\n```\r\n\r\nAnd then execute:\r\n\r\n```bash\r\n$ bundle\r\n```\r\n\r\nOr install it yourself as:\r\n\r\n```bash\r\n$ gem install jsoncache\r\n```\r\n\r\n## Usage\r\n\r\nInclude it in the class or module you want to use it in.\r\n\r\n```ruby\r\nextend JSONCache\r\n```\r\n\r\nTo enable caching for a method use the include class method `cache`.\r\n\r\n```ruby\r\ncache :expensive_method, expiry: 300\r\n```\r\n\r\nNote: the `cache` method call has to come after the method definition.\r\n\r\n## Example\r\n\r\n```ruby\r\nrequire 'jsoncache'\r\n\r\nClass A\r\n  extend JSONCache\r\n\r\n  def expensive_method(args)\r\n    # code\r\n  end\r\n\r\n  cache :expensive_method, expiry: 300\r\nend\r\n```\r\n\r\nThe cache method will the existing method and provide it with caching to the local filesystem. You can set a TTL (time to live) for the cache by setting the `expiry` value in seconds.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}